import socketimport osif os.name ==  'nt':    cleaning = 'cls'else:    cleaning = 'clear'os.system(cleaning)print("\t\t\t\t\t\t.ıilI||| ClientApp |||Iliı.\n")usr, pw = input("Enter username and password, with whitespace between: ").split(" ")socket2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)socket2.connect((socket._LOCALHOST, 8080))usr_pw_couple = usr + " " + pwsocket2.send(usr_pw_couple.encode())regcomplete = 0onlinelist = []oniplist = []gotonlines = Falsedont_send_or_recv = Falseyss = Falsewhile True:    try:        if not dont_send_or_recv:            data = socket2.recv(2048).decode()            RESPCODE, MSG = data.split("-")        #Client side of registration        if (RESPCODE == "ERR_NARU") and (not dont_send_or_recv):            print("Server response: ", MSG)            selection = "a"            while selection.lower() != "exit":                selection = input("Enter seleciton here: ")                if(selection == "r" or selection == "R"):                    socket2.send(selection.encode())                    os.system(cleaning)                    proc = "a"                    while proc != "y":                        usr_pw_couple = input("Enter an ID / PW couple, seperated by space: ")                        print("Your ID / PW is: ", usr_pw_couple, "\nDo you want to proceed? (y/n)", sep="")                        proc = input()                    os.system(cleaning)                    print("Sending your ID / PW to the registry server.")                    socket2.send(usr_pw_couple.encode())                    register_stat = socket2.recv(2048).decode()                    while register_stat != "SUCCESS":                        print("That ID is in use. Please enter different one.\nEnter here:")                        usr_pw_couple = input()                        socket2.send(usr_pw_couple.encode())                        register_stat = socket2.recv(2048).decode()                    regcomplete = 1                    print("Successfully registered, logged in.")                    break                elif selection.lower() == "/quit":                    socket2.send(selection.encode())                    exit()                else:                    print("Incorrect input.")        #----------------------------------------------------------------------------------------        elif (RESPCODE == "RETON") and (not dont_send_or_recv):            onlinelist = []            oniplist = []            onlinelist = MSG.split("\n")            onlinelist.remove("")            print("\n")            for x in onlinelist:                temp = x.split(" ")                oniplist.append((temp[0], temp[1]))                print(x)            print("\n")            print("Use 'connect' as instructed to connect one of the users listed above.")            gotonlines = True        elif not yss:            print("Server response: ", MSG)        yss = False        dont_send_or_recv = False        msg = input("To listen for incoming connections, type 'listen'. To get list of online users, type 'search'. To connect a user, type 'connect' To quit, enter '/quit'.\nEnter Here: ")        if msg == "/quit":            socket2.send(msg.encode())            break        elif msg == "search":            if gotonlines == True:                for x in onlinelist:                    print(x)            else:                msg = msg        elif msg == "connect":            if gotonlines == False:                print("ERROR: You should search for online users first!")                dont_send_or_recv = True                yss = True            else:                peer_ip = input("Enter the IP address of the peer you want to connect: ")                print("bunu dediğinde diğer client'a connect edicez.")        socket2.send(msg.encode())    except KeyboardInterrupt:            socket2.send("CLI_FORCED".encode())            break    #except Exception:            #print("ERROR: Server disconnected. Closing.")            #exit()socket2.close()exit()