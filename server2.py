import socketimport threadingimport osif os.name ==  'nt':    cleaning = 'cls'else:    cleaning = 'clear'class ClientHandlerThread(threading.Thread):    def __init__(self, conn, ip, port):        threading.Thread.__init__(self)        self.ip = ip        self.port = port        self.conn = conn        print("New handler thread started for client ", ip, ":", port)    def run(self):        camefromregister = 0        notregisteredq = False        broke_register = False        t_usr, t_pw = self.conn.recv(2048).decode().split(" ")        print("LOG:CONN_ATTEMPT-", self.ip, ":", self.port, "-un:", t_usr, "-pw:", t_pw, sep="")        registry = [t_usr, t_pw, 0, 0]        registry_on = [t_usr, t_pw, 1, self.ip]        if (registry in clientlist) or camefromregister:            self.conn.send("MSG-You are now connected to registry server.".encode())            print("LOG:CONNECTED_USR-", self.ip, ":", self.port, "-un:", t_usr, "-pw:", t_pw, sep="")            clientlist.remove(registry)            onlinelist.append(registry_on)            print(clientlist)            print(onlinelist)        else:            try:                print("LOG:CONN_REJ_NARU-", self.ip, ":", self.port, "-un:", t_usr, "-pw:", t_pw, sep="")                self.conn.send("ERR_NARU-You are not a registered user. Type 'r' to register, or '/quit' to close connection.".encode())                client_selection = self.conn.recv(2048).decode()                if client_selection == "/quit":                    notregisteredq = True                elif client_selection.lower() == "r":                    r_usr, r_pw = self.conn.recv(2048).decode().split(" ")                    print("LOG:REGISTER_REQUEST-", self.ip, ":", self.port, "-un:", r_usr, "-pw:", r_pw, sep="")                    registry = [r_usr, r_pw, 0, 0]                    registry_on = [r_usr, r_pw, 1, self.ip]                    while ((registry[0] in (row[0] for row in clientlist)) or (registry_on[0] in (row[0] for row in onlinelist))):                        print("LOG:USRPW_IN_USE-", self.ip, ":", self.port, "-un:", r_usr, "-pw:", r_pw, sep="")                        self.conn.send("IN_USE".encode())                        r_usr, r_pw = self.conn.recv(2084).decode().split(" ")                        registry = [r_usr, r_pw, 0, 0]                        registry_on = [r_usr, r_pw, 1, self.ip]                    broke_register = True                    onlinelist.append(registry_on)                    self.conn.send("SUCCESS".encode())                    t_usr = r_usr                    t_pw = r_pw                    camefromregister = 1                    print(clientlist, onlinelist)            except:                print("LOG:USR_FORCED_DC-", self.ip, ":", self.port, "-un:", t_usr, "-pw:", t_pw, sep="")                if broke_register:                    onlinelist.remove(registry_on)                    clientlist.append(registry)                exit()            if notregisteredq:                print("LOG:USER_QUITTED_REG-", self.ip, ":", self.port, "-un:", t_usr, "-pw:", t_pw, sep="")                exit()        broke_register = False        while True:            #bunun yerine udp 6 saniye kontrol√º gelecek            try:                data = self.conn.recv(2048).decode()                if data == "/quit":                    onlinelist.remove(registry_on)                    clientlist.append(registry)                    exit()                elif data == "search":                    retonlist = ""                    for x in range(len(onlinelist)):                        retonlist = retonlist + onlinelist[x][0] + " " + onlinelist[x][3] + "\n"                    print(retonlist)                    lock.acquire()                    self.conn.send(("RETON-" + retonlist).encode())                    print(self.ip, " ", self.port)                    lock.release()                elif data == "CLI_FORCED":                    print("LOG:USR_FORCED_DC-", self.ip, ":", self.port, "-un:", t_usr, "-pw:", t_pw, sep="")                    onlinelist.remove(registry_on)                    clientlist.append(registry)                    exit()                else:                    print(data)                    #conn.send(("MSG-" + input()).encode())            except:                print("LOG:USR_FORCED_DC-", self.ip, ":", self.port, "-un:", t_usr, "-pw:", t_pw, sep="")                onlinelist.remove(registry_on)                clientlist.append(registry)                exit()#for writing client list to filedef file_writer(clist):    client_list_f = open("clientlist.txt", "w")    for client in clist:        client_list_f.write(client[0]+ " " + client[1] + "\n")    client_list_f.close()#for reading client list from file into clientlistdef file_reader(clist):    client_list_f = open("clientlist.txt", "r")    for line in client_list_f:        a, b = line.strip("\n").split(" ")        clist.append([a, b, 0, 0])    client_list_f.close()os.system(cleaning)serversock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)serversock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)serversock.bind(('0.0.0.0', 8080))threadlist = []clientlist = []onlinelist = []lock = threading.Lock()file_reader(clientlist)print(clientlist)print(onlinelist)while True:    try:        serversock.listen(4)        (conn, (ip, port)) = serversock.accept()        newthread = ClientHandlerThread(conn, ip, port)        newthread.start()        threadlist.append(newthread)    except KeyboardInterrupt:        file_writer(clientlist)        exit()